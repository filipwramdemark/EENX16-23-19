<!DOCTYPE html>
<html>
    <head>
        <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='style.css')}}" />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" /> 
    </head>

    <body class="background">
        <div>
            <a href="/" class="homebutton"> <i class="fa fa-home"></i> </a>
            <h1> Vilken valla valde du? </h1>
        </div>
        <br>
        <form method="POST" class="input" autocomplete="off">
            <div class="autocomplete">
            <input name="wax" id="wax" type="text" class="inputfield">
            </div>
            <br>
            <br>
            <input type="submit" value="LÃ¤mna feedback" class="waxbutton">
        </form>
        <script>
            // insperation from 
            // https://stackoverflow.com/questions/65535392/how-to-make-autocomplete-in-javascript-show-entries-regardless-of-word-order
            
            // autocomplete function taking text field and array as input
            function autocomp(inp, x) {
            var current;
            
            inp.addEventListener("input", function(e) {
                var a, b, i, val = this.value;
                closeAllLists();
                if (!val) { 
                    return false;
                }
                current = -1;

                // create a DIV element containing the items
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");

                this.parentNode.appendChild(a);
                
                // for every item, if the prefix matches, create a DIV element, make the prefix bold 
                for (i = 0; i < x.length; i++) {
                    if (x[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    b = document.createElement("DIV");
                    b.innerHTML = "<strong>" + x[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += "<input type='hidden' value='" + x[i] + "'>";
                    b.innerHTML += x[i].substr(val.length);
                    b.addEventListener("click", function(e) {
                        inp.value = this.getElementsByTagName("input")[0].value;
                        closeAllLists();
                    });
                    a.appendChild(b);
                    }
                }
            });

            /*execute a function presses a key on the keyboard:*/
            inp.addEventListener("keydown", function(e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    /*If the arrow DOWN key is pressed,
                    increase the current variable:*/
                    // increase current counter if down is active and mark it
                    current++;
                    addActive(x);
                } else if (e.keyCode == 38) { //up
                    // decrease current counter if up is active and mark it
                    current--;
                    addActive(x);
                } else if (e.keyCode == 13) {
                    /*If the ENTER key is pressed, prevent the form from being submitted,*/
                    e.preventDefault();
                    if (current > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[current].click();
                    }
                }

            });
            function addActive(x) {
                /*a function to classify an item as "active":*/
                if (!x) return false;
                /*start by removing the "active" class on all items:*/
                removeActive(x);
                if (current >= x.length) current = 0;
                if (current < 0) current = (x.length - 1);
                /*add class "autocomplete-active":*/
                x[current].classList.add("autocomplete-active");
            }

            function removeActive(x) {
                /*a function to remove the "active" class from all autocomplete items:*/
                for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
                }
            }

            // close autocomplete lists 
            function closeAllLists(elmnt) {
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
                }
            }
            
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
            }
            
            // get availible waxes
            var waxes_av = [
                {% for wax in waxes %}
                    "{{wax}}",
                {% endfor %}
                ];

            autocomp(document.getElementById("wax"), waxes_av);  
        </script>
    </body>
</html>
